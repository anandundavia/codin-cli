const fs = require('fs');
const path = require('path');
const shell = require('shelljs');

// const constants = require('../../config/constants');
const logger = require('../services/logger.service');


const TypeScript = function TypeScript() {
    // const updateTimeStamp = cwd => new Promise((resovle, reject) => {
    //     try {
    //         const file = path.join(cwd, constants.fs.directory, constants.fs.info);
    //         const info = { typescript: { last_compiled: new Date().getTime() } };
    //         fs.writeFileSync(file, info);
    //         return resovle();
    //     } catch (e) {
    //         return reject(e);
    //     }
    // });

    // const getTimeStamp = cwd => new Promise((resolve, reject) => {
    //     try {
    //         const file = path.join(cwd, constants.fs.directory, constants.fs.info);
    //         if (fs.existsSync(file)) {
    //             const info = JSON.parse(fs.readFileSync(file, 'utf-8'));
    //             return info.typescript.last_compiled;
    //         }
    //         return 0;
    //     } catch (e) {
    //         return reject(e);
    //     }
    // });

    // const shouldCompile = () => new Promise((resovle, reject) => {

    // });

    /**
     * Takes the tsconfig.json and compiles the angular project to js
     * @param {string} cwd Path to the current project root
     */
    this.compile = cwd => new Promise((resolve, reject) => {
        try {
            logger.info('Compiling typescipt');
            const tsc = path.join('node_modules', '.bin', 'tsc');
            const command = `"${tsc}" --p .`;
            shell.exec(command, { silent: true, cwd });
            const tslintConfigs = JSON.parse(fs.readFileSync('tsconfig.json', 'utf-8'));
            logger.info('Typescipt sucessfully compiled');
            return resolve(path.join(cwd, tslintConfigs.compilerOptions.outDir));
        } catch (e) {
            return reject(e);
        }
    });

    /**
     * Deletes the dist folder generated by the typescript compiler
     * @param {string} cwd Path to the current project root
     */
    this.cleanup = cwd => new Promise((resolve, reject) => {
        try {
            const tslintConfigs = JSON.parse(fs.readFileSync('tsconfig.json', 'utf-8'));
            const output = path.join(cwd, tslintConfigs.compilerOptions.outDir);
            fs.unlinkSync(output);
            return resolve();
        } catch (e) {
            return reject(e);
        }
    });
};

module.exports = new TypeScript();
